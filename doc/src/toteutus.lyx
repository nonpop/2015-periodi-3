#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
% For XeTeX %%%%%%%%%%%
%\usepackage{fontspec}
%\usepackage{xunicode}
%\usepackage{xltxtra}
%%%%%%%%%%%%%%%%%%

\setenumerate{listparindent=\parindent,parsep=0pt,labelindent=\parindent,leftmargin=*}

\usepackage{tikz}
\usepackage{tikz-cd}
\usetikzlibrary{decorations.markings,shapes,arrows,calc,decorations.pathreplacing,matrix,backgrounds}
\usepackage{array}
\usepackage{bussproofs}


% open subset
\newcommand{\oset}{\mathrel{\subset\mkern-15mu\raisebox{0.15ex}{\textrm{\footnotesize o}}\hspace{0.1em}}}

% closed subset
\newcommand{\cset}{\mathrel{\subset\mkern-15mu\raisebox{0.15ex}{\textrm{\footnotesize c}}\hspace{0.1em}}}


% some operators
\usepackage{amsopn}
\DeclareMathOperator{\extr}{ext}
\DeclareMathOperator{\intr}{int}
\DeclareMathOperator{\cl}{cl}
\DeclareMathOperator{\id}{id}
\DeclareMathOperator{\pr}{pr}
\DeclareMathOperator{\D}{D}
\DeclareMathOperator{\CRe}{Re}
\DeclareMathOperator{\CIm}{Im}
\newcommand{\dd}{\mathrm{d}}
\DeclareMathOperator{\dom}{dom}
\DeclareMathOperator{\cod}{cod}
\DeclareMathOperator{\ddf}{ddf}
\DeclareMathOperator{\ran}{ran}
\DeclareMathOperator{\rng}{rng}
\DeclareMathOperator{\Mor}{Mor}
\DeclareMathOperator{\Ob}{Ob}
\DeclareMathOperator{\kerf}{Ker}
\DeclareMathOperator{\imf}{Im}
\DeclareMathOperator{\fld}{fld}
\DeclareMathOperator{\ev}{ev}
\DeclareMathOperator{\eq}{eq}
\DeclareMathOperator{\Eq}{Eq}

\usepackage{footnote}
\makesavenoteenv{tabular}


\tikzstyle{blackbox} = [rectangle,draw,fill=gray!30,text width=5em,text centered,minimum height=3em]
\tikzset{
  arrow/.style={
    decoration={
      markings,
      mark=at position 1 with {\arrow[scale=1]{>}}
    },
    postaction={decorate},
    %shorten >=0.4pt
  }
}
\tikzstyle{decision} = [diamond, draw, fill=white,
    text width=4.5em, text badly centered, inner sep=0pt]
\tikzstyle{block} = [rectangle, draw, fill=white, 
    text width=5em, text centered, rounded corners, minimum height=4em]
\tikzstyle{line} = [draw, -latex']
\tikzstyle{cloud} = [draw, ellipse,fill=white, 
    minimum height=2em]

%\newcommand{\propositionname}{Propositio}
%\newcommand{\corollaryname}{Korollaari}

\renewcommand{\arraystretch}{1.25}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
fixltx2e
fix-cm
logicalmkup
theorems-ams-extended
enumitem
\end_modules
\maintain_unincluded_children false
\language finnish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 2
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\justification true
\use_refstyle 0
\index Hakusana
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 5
\paragraph_separation indent
\paragraph_indentation default
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle plain
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Toteutusdokumentti
\end_layout

\begin_layout Section
Ohjelman yleisrakenne
\end_layout

\begin_layout Standard
Ohjelman rakenne on hyvin yksinkertainen.
 Pakkauksia on neljä:
\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
main
\end_layout

\end_inset

 sisältää pääohjelman, joka lukee asetukset ja käynnistää pakkauksen/purkamisen.
 Ainoa luokka on 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Main
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
util
\end_layout

\end_inset

 sisältää joitain itse toteutettuja yleishyödyllisiä luokkia:
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BitInputStream
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
BitOutputStream
\end_layout

\end_inset

: mahdollistavat biteittäin tapahtuvan streamien lukemisen ja kirjoittamisen
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
List
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Set
\end_layout

\end_inset

: itse toteutetut 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ArrayList
\end_layout

\end_inset

 ja 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
HashSet
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Pair
\end_layout

\end_inset

: kahden objektin pari
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Math
\end_layout

\end_inset

: muutama simppeli matematiikkafunktio
\end_layout

\begin_layout Itemize
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Options
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Option
\end_layout

\end_inset

: komentoriviltä annettavien parametrien lukeminen
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
huffman
\end_layout

\end_inset

 sisältää Huffman-koodausalgoritmit.
 Luokat:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Huffman
\end_layout

\end_inset

: varsinaset pakkaus/purkufunktiot sekä tarvittavat apufunktiot.
 Kaikki staattisia metodeja.
\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
HuffmanTree
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
HuffmanTreeNode
\end_layout

\end_inset

: Huffman-puu (tavallinen binääripuu paitsi että lehtiin pääsee suoraan
 käsiksi taulukon kautta).
\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
HuffmanHeap
\end_layout

\end_inset

: itse toteutettu erikoistapaus 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
PriorityQueuesta
\end_layout

\end_inset

 (minimikeko).
 Käytetään Huffman-puun konstruoinnissa.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
lzw
\end_layout

\end_inset

 sisältää LZW-koodausalgoritmit: Luokat:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
LZW
\end_layout

\end_inset

: varsinaiset pakkaus/purkufunktiot sekä tarvittavat apufunktiot.
 Kaikki staattisia metodeja.
\end_layout

\begin_layout Enumerate
\begin_inset Flex Code
status open

\begin_layout Plain Layout
LZWDictionary
\end_layout

\end_inset

, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
LZWDictionaryEntry
\end_layout

\end_inset

: pakkausvaiheessa käytettävä sanasto (prefiksipuu).
\end_layout

\end_deeper
\begin_layout Section
Saavutetut aika- ja tilavaativuudet
\end_layout

\begin_layout Standard
Luokkien List, Set ja HuffmanHeap vaativuudet ovat samat kuin Javan valmiilla
 ArrayList, HashSet ja PriorityQueue -luokilla.
\end_layout

\begin_layout Subsection
Huffman
\end_layout

\begin_layout Subsubsection
Pakkaus
\end_layout

\begin_layout Standard
Pakkausalgoritmi:
\end_layout

\begin_layout Verbatim
compress():
\end_layout

\begin_layout Verbatim
  frequencies = calculateFrequencies()
\end_layout

\begin_layout Verbatim
  tree = buildTree(frequencies)
\end_layout

\begin_layout Verbatim
  while !EOF:
\end_layout

\begin_layout Verbatim
    b = read()
\end_layout

\begin_layout Verbatim
    write(findCode(tree, b))
\end_layout

\begin_layout Standard
Funktio 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
calculateFrequencies()
\end_layout

\end_inset

 on yksinkertainen:
\end_layout

\begin_layout Verbatim
calculateFrequencies():
\end_layout

\begin_layout Verbatim
  result = int[256]
\end_layout

\begin_layout Verbatim
  while !EOF:
\end_layout

\begin_layout Verbatim
    b = read()
\end_layout

\begin_layout Verbatim
    result[b]++
\end_layout

\begin_layout Verbatim
  return result
\end_layout

\begin_layout Standard
Kyseessä on 
\begin_inset Formula $O(n)$
\end_inset

-aikainen ja 
\begin_inset Formula $O(1)$
\end_inset

-tilainen funktio.
\end_layout

\begin_layout Standard
Funktio 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
buildTree()
\end_layout

\end_inset

 muodostaa merkkitaajuuksista Huffman-puun:
\end_layout

\begin_layout Verbatim
buildTree(frequencies):
\end_layout

\begin_layout Verbatim
  queue = new MinHeap()
\end_layout

\begin_layout Verbatim
  for b = 0 ...
 255:
\end_layout

\begin_layout Verbatim
    queue.push(TreeNode(frequencies[b]))
\end_layout

\begin_layout Verbatim
  
\end_layout

\begin_layout Verbatim
  while queue.size >= 2:
\end_layout

\begin_layout Verbatim
    a = queue.pop()
\end_layout

\begin_layout Verbatim
    b = queue.pop()
\end_layout

\begin_layout Verbatim
    queue.push(new Node(a.frequency + b.frequency))
\end_layout

\begin_layout Verbatim
  
\end_layout

\begin_layout Verbatim
  return queue.pop()
\end_layout

\begin_layout Standard
Ensimmäinen simukka käydään aina 256 kertaa läpi.
 Toisessa silmukassa jonon alkioiden määrä vähenee aina yhdellä, joten sekin
 käydään (noin) 256 kertaa läpi.
 Lopputuloksena 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
buildTree()
\end_layout

\end_inset

 on vakioaikainen ja -tilainen.
\end_layout

\begin_layout Standard
Sitten vielä 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
findCode()
\end_layout

\end_inset

:
\end_layout

\begin_layout Verbatim
findCode(node):
\end_layout

\begin_layout Verbatim
  result = new List()
\end_layout

\begin_layout Verbatim
  while node.parent:
\end_layout

\begin_layout Verbatim
    if node == node.parent.right:
\end_layout

\begin_layout Verbatim
      res.add(true)
\end_layout

\begin_layout Verbatim
    else:
\end_layout

\begin_layout Verbatim
      res.add(false)
\end_layout

\begin_layout Verbatim
    node = node.parent
\end_layout

\begin_layout Verbatim
  return res.reverse()
\end_layout

\begin_layout Standard
Kuten 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
buildTree()
\end_layout

\end_inset

, Huffman-puun korkeus on korkeintaan 256.
 Tästä seuraa, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
että findCode()
\end_layout

\end_inset

:n silmukka ajetaan korkeintaan 256 kertaa ja palautettava lista on korkeintaan
 näin pitkä.
 Siis kyseessä on vakioaikainen- ja tilainen funktio.
 Lopputuloksena 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
compress()
\end_layout

\end_inset

 on 
\begin_inset Formula $O(n)$
\end_inset

-aikainen ja 
\begin_inset Formula $O(1)$
\end_inset

-tilainen.
\end_layout

\begin_layout Section
Työn mahdolliset puutteet ja parannusehdotukset
\end_layout

\begin_layout Section
Lähteet
\end_layout

\end_body
\end_document
